# Exercise 6
# Author: Md Rownak Abtahee Diganta 
# Student ID: 301539632

1.

I feel like we are p-hacking because the output we got doesn't make sense totally as there is only one value in my case which was below 0.05. 
rest of them was above 0.05. Hence, it is hard to get to a proper conclusion or decision. I feel like we tried to manipulate the p-value to 
get a outcome for our convenience but failed to do so. This is the same reason why I'm not comfortable coming to a conclusion at p < 0.05.

2.

we need to find the total number of test runs if we were doing T-tests between each pair of sorting implementation. There are in total 7
sorting implementations and by grouping them into 2 we need to find all the possible combinations to find the exact number. That would be, 
C(7,2) = 7!/(2!*5!) = 21 Tests in total which we need to run.
If we looked for p < 0.05 in them, the probability of having any false conclusions, just by chance would be (0.05/21) = 0.00238095238

3.

The output I got from my code:

Sorting implementations and respective mean of their speed:

qs1               0.000712
qs2               0.000773
qs3               0.000766
qs4               0.000633
qs5               0.000622
merge1            0.000550
partition_sort    0.000428
dtype: float64


Sorting implementations and their respective rank(Ascending):

partition_sort    1.0
merge1            2.0
qs5               3.0
qs4               4.0
qs1               5.0
qs3               6.0
qs2               7.0
dtype: float64

 F_onewayResult(statistic=1095.0445639200284, pvalue=0.0) 

ANOVA p-value:  0.0 

        Multiple Comparison of Means - Tukey HSD, FWER=0.05         
====================================================================
    group1         group2     meandiff p-adj   lower   upper  reject
--------------------------------------------------------------------
        merge1 partition_sort  -0.0001    0.0 -0.0001 -0.0001   True
        merge1            qs1   0.0002    0.0  0.0001  0.0002   True
        merge1            qs2   0.0002    0.0  0.0002  0.0002   True
        merge1            qs3   0.0002    0.0  0.0002  0.0002   True
        merge1            qs4   0.0001    0.0  0.0001  0.0001   True
        merge1            qs5   0.0001    0.0  0.0001  0.0001   True
partition_sort            qs1   0.0003    0.0  0.0003  0.0003   True
partition_sort            qs2   0.0003    0.0  0.0003  0.0004   True
partition_sort            qs3   0.0003    0.0  0.0003  0.0004   True
partition_sort            qs4   0.0002    0.0  0.0002  0.0002   True
partition_sort            qs5   0.0002    0.0  0.0002  0.0002   True
           qs1            qs2   0.0001    0.0     0.0  0.0001   True
           qs1            qs3   0.0001    0.0     0.0  0.0001   True
           qs1            qs4  -0.0001    0.0 -0.0001 -0.0001   True
           qs1            qs5  -0.0001    0.0 -0.0001 -0.0001   True
           qs2            qs3     -0.0 0.8986    -0.0     0.0  False
           qs2            qs4  -0.0001    0.0 -0.0002 -0.0001   True
           qs2            qs5  -0.0002    0.0 -0.0002 -0.0001   True
           qs3            qs4  -0.0001    0.0 -0.0001 -0.0001   True
           qs3            qs5  -0.0001    0.0 -0.0002 -0.0001   True
           qs4            qs5     -0.0  0.301    -0.0     0.0  False
--------------------------------------------------------------------

From the above output, I can easily say that, in my case, the ranking of the sorting implementations from fastest to slowest would be, partition_sort, merge1,
qs5, qs4, qs1, qs3, qs2. 

Also, from Multiple Comparison of Means - Tukey HSD, I can say that, in my case, qs2 and qs3 is the first pair and qs4 and qs5 would be the second pair which 
could not be distinguished. 